<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmlns:architecture="http://www.eclipse.org/papyrus/infra/core/architecture"
         xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
         xmlns:fn="http://www.w3.org/2005/xpath-functions"
         xmlns:math="http://exslt.org/math"
         xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML"
         xmlns:xmi="http://www.omg.org/spec/XMI/20131001"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:yang="urn:ietf:params:xml:ns:yang:ietf-yang-types"
         xmlns:yin="urn:ietf:params:xml:ns:yang:yin:1"
         xmi:version="20131001">
   <uml:Model xmi:id="d4e1" name="ietf-yang-types">
      <packageImport xmi:type="uml:PackageImport" xmi:id="d4e1pi">
         <importedPackage xmi:type="uml:Model"
                          href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
      </packageImport>
      <ownedComment xmi:type="uml:Comment" xmi:id="d4e19" annotatedElement="d4e1">
         <body>This module contains a collection of generally useful derived
YANG data types.

Copyright (c) 2013 IETF Trust and the persons identified as
authors of the code.  All rights reserved.

Redistribution and use in source and binary forms, with or
without modification, is permitted pursuant to, and subject
to the license terms contained in, the Simplified BSD License
set forth in Section 4.c of the IETF Trust's Legal Provisions
Relating to IETF Documents
(http://trustee.ietf.org/license-info).

This version of this YANG module is part of RFC 6991; see
the RFC itself for full legal notices.</body>
      </ownedComment>
      <packagedElement xmi:type="uml:Package" xmi:id="d4e1oc" name="ObjectClasses"/>
      <packagedElement xmi:type="uml:Package" xmi:id="d4e1td" name="TypeDefinitions">
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e56" name="yang:counter32">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e58" name="counter32">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:uint32"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e60" annotatedElement="d4e56">
               <body>The counter32 type represents a non-negative integer
that monotonically increases until it reaches a
maximum value of 2^32-1 (4294967295 decimal), when it
wraps around and starts increasing again from zero.

Counters have no defined 'initial' value, and thus, a
single value of a counter has (in general) no information
content.  Discontinuities in the monotonically increasing
value normally occur at re-initialization of the
management system, and at other times as specified in the
description of a schema node using this type.  If such
other times can occur, for example, the creation of
a schema node of type counter32 at times other than
re-initialization, then a corresponding schema node
should be defined, with an appropriate type, to indicate
the last discontinuity.

The counter32 type should not be used for configuration
schema nodes.  A default statement SHOULD NOT be used in
combination with the type counter32.

In the value set and its semantics, this type is equivalent
to the Counter32 type of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType"
                          xmi:id="d4e73"
                          name="yang:zero-based-counter32">
            <ownedAttribute xmi:type="uml:Property"
                            xmi:id="d4e75"
                            name="zero-based-counter32"
                            type="d4e56"/>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e79" annotatedElement="d4e73">
               <body>The zero-based-counter32 type represents a counter32
that has the defined 'initial' value zero.

A schema node of this type will be set to zero (0) on creation
and will thereafter increase monotonically until it reaches
a maximum value of 2^32-1 (4294967295 decimal), when it
wraps around and starts increasing again from zero.

Provided that an application discovers a new schema node
of this type within the minimum time to wrap, it can use the
'initial' value as a delta.  It is important for a management
station to be aware of this minimum time and the actual time
between polls, and to discard data if the actual time is too
long or there is no defined minimum time.

In the value set and its semantics, this type is equivalent
to the ZeroBasedCounter32 textual convention of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e92" name="yang:counter64">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e94" name="counter64">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:uint64"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e96" annotatedElement="d4e92">
               <body>The counter64 type represents a non-negative integer
that monotonically increases until it reaches a
maximum value of 2^64-1 (18446744073709551615 decimal),
when it wraps around and starts increasing again from zero.

Counters have no defined 'initial' value, and thus, a
single value of a counter has (in general) no information
content.  Discontinuities in the monotonically increasing
value normally occur at re-initialization of the
management system, and at other times as specified in the
description of a schema node using this type.  If such
other times can occur, for example, the creation of
a schema node of type counter64 at times other than
re-initialization, then a corresponding schema node
should be defined, with an appropriate type, to indicate
the last discontinuity.

The counter64 type should not be used for configuration
schema nodes.  A default statement SHOULD NOT be used in
combination with the type counter64.

In the value set and its semantics, this type is equivalent
to the Counter64 type of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType"
                          xmi:id="d4e109"
                          name="yang:zero-based-counter64">
            <ownedAttribute xmi:type="uml:Property"
                            xmi:id="d4e111"
                            name="zero-based-counter64"
                            type="d4e92"/>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e115" annotatedElement="d4e109">
               <body>The zero-based-counter64 type represents a counter64 that
has the defined 'initial' value zero.




A schema node of this type will be set to zero (0) on creation
and will thereafter increase monotonically until it reaches
a maximum value of 2^64-1 (18446744073709551615 decimal),
when it wraps around and starts increasing again from zero.

Provided that an application discovers a new schema node
of this type within the minimum time to wrap, it can use the
'initial' value as a delta.  It is important for a management
station to be aware of this minimum time and the actual time
between polls, and to discard data if the actual time is too
long or there is no defined minimum time.

In the value set and its semantics, this type is equivalent
to the ZeroBasedCounter64 textual convention of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e129" name="yang:gauge32">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e131" name="gauge32">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:uint32"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e133" annotatedElement="d4e129">
               <body>The gauge32 type represents a non-negative integer, which
may increase or decrease, but shall never exceed a maximum
value, nor fall below a minimum value.  The maximum value
cannot be greater than 2^32-1 (4294967295 decimal), and
the minimum value cannot be smaller than 0.  The value of
a gauge32 has its maximum value whenever the information
being modeled is greater than or equal to its maximum
value, and has its minimum value whenever the information
being modeled is smaller than or equal to its minimum value.
If the information being modeled subsequently decreases
below (increases above) the maximum (minimum) value, the
gauge32 also decreases (increases).

In the value set and its semantics, this type is equivalent
to the Gauge32 type of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e146" name="yang:gauge64">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e148" name="gauge64">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:uint64"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e150" annotatedElement="d4e146">
               <body>The gauge64 type represents a non-negative integer, which
may increase or decrease, but shall never exceed a maximum
value, nor fall below a minimum value.  The maximum value
cannot be greater than 2^64-1 (18446744073709551615), and
the minimum value cannot be smaller than 0.  The value of
a gauge64 has its maximum value whenever the information
being modeled is greater than or equal to its maximum
value, and has its minimum value whenever the information
being modeled is smaller than or equal to its minimum value.
If the information being modeled subsequently decreases
below (increases above) the maximum (minimum) value, the
gauge64 also decreases (increases).

In the value set and its semantics, this type is equivalent
to the CounterBasedGauge64 SMIv2 textual convention defined
in RFC 2856</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType"
                          xmi:id="d4e163"
                          name="yang:object-identifier">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e165" name="object-identifier">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e170" annotatedElement="d4e163">
               <body>The object-identifier type represents administratively
assigned names in a registration-hierarchical-name tree.

Values of this type are denoted as a sequence of numerical
non-negative sub-identifier values.  Each sub-identifier
value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers
are separated by single dots and without any intermediate
whitespace.

The ASN.1 standard restricts the value space of the first
sub-identifier to 0, 1, or 2.  Furthermore, the value space
of the second sub-identifier is restricted to the range
0 to 39 if the first sub-identifier is 0 or 1.  Finally,
the ASN.1 standard requires that an object identifier
has always at least two sub-identifiers.  The pattern
captures these restrictions.

Although the number of sub-identifiers is not limited,
module designers should realize that there may be
implementations that stick with the SMIv2 limit of 128
sub-identifiers.

This type is a superset of the SMIv2 OBJECT IDENTIFIER type
since it is not restricted to 128 sub-identifiers.  Hence,
this type SHOULD NOT be used to represent the SMIv2 OBJECT
IDENTIFIER type; the object-identifier-128 type SHOULD be
used instead.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType"
                          xmi:id="d4e183"
                          name="yang:object-identifier-128">
            <ownedAttribute xmi:type="uml:Property"
                            xmi:id="d4e185"
                            name="object-identifier-128"
                            type="d4e163"/>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e190" annotatedElement="d4e183">
               <body>This type represents object-identifiers restricted to 128
sub-identifiers.

In the value set and its semantics, this type is equivalent
to the OBJECT IDENTIFIER type of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e203" name="yang:yang-identifier">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e205" name="yang-identifier">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e214" annotatedElement="d4e203">
               <body>A YANG identifier string as defined by the 'identifier'
rule in Section 12 of RFC 6020.  An identifier must
start with an alphabetic character or an underscore
followed by an arbitrary sequence of alphabetic or
numeric characters, underscores, hyphens, or dots.

A YANG identifier MUST NOT start with any possible
combination of the lowercase or uppercase character
sequence 'xml'.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e227" name="yang:date-and-time">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e229" name="date-and-time">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e234" annotatedElement="d4e227">
               <body>The date-and-time type is a profile of the ISO 8601
standard for representation of dates and times using the
Gregorian calendar.  The profile is defined by the
date-time production in Section 5.6 of RFC 3339.

The date-and-time type is compatible with the dateTime XML
schema type with the following notable exceptions:

(a) The date-and-time type does not allow negative years.

(b) The date-and-time time-offset -00:00 indicates an unknown
    time zone (see RFC 3339) while -00:00 and +00:00 and Z
    all represent the same time zone in dateTime.

(c) The canonical format (see below) of data-and-time values
    differs from the canonical format used by the dateTime XML
    schema type, which requires all times to be in UTC using
    the time-offset 'Z'.

This type is not equivalent to the DateAndTime textual
convention of the SMIv2 since RFC 3339 uses a different
separator between full-date and full-time and provides
higher resolution of time-secfrac.

The canonical format for date-and-time values with a known time
zone uses a numeric time zone offset that is calculated using
the device's configured known offset to UTC time.  A change of
the device's offset to UTC time will cause date-and-time values
to change accordingly.  Such changes might happen periodically
in case a server follows automatically daylight saving time
(DST) time zone offset changes.  The canonical format for
date-and-time values with an unknown time zone (usually
referring to the notion of local time) uses the time-offset
-00:00.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e248" name="yang:timeticks">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e250" name="timeticks">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:uint32"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e252" annotatedElement="d4e248">
               <body>The timeticks type represents a non-negative integer that
represents the time, modulo 2^32 (4294967296 decimal), in
hundredths of a second between two epochs.  When a schema
node is defined that uses this type, the description of
the schema node identifies both of the reference epochs.

In the value set and its semantics, this type is equivalent
to the TimeTicks type of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e265" name="yang:timestamp">
            <ownedAttribute xmi:type="uml:Property"
                            xmi:id="d4e267"
                            name="timestamp"
                            type="d4e248"/>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e269" annotatedElement="d4e265">
               <body>The timestamp type represents the value of an associated
timeticks schema node at which a specific occurrence
happened.  The specific occurrence must be defined in the
description of any schema node defined using this type.  When
the specific occurrence occurred prior to the last time the
associated timeticks attribute was zero, then the timestamp
value is zero.  Note that this requires all timestamp values
to be reset to zero when the value of the associated timeticks
attribute reaches 497+ days and wraps around to zero.

The associated timeticks schema node must be specified
in the description of any schema node using this type.

In the value set and its semantics, this type is equivalent
to the TimeStamp textual convention of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e282" name="yang:phys-address">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e284" name="phys-address">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e289" annotatedElement="d4e282">
               <body>Represents media- or physical-level addresses represented
as a sequence octets, each octet represented by two hexadecimal
numbers.  Octets are separated by colons.  The canonical
representation uses lowercase characters.

In the value set and its semantics, this type is equivalent
to the PhysAddress textual convention of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e302" name="yang:mac-address">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e304" name="mac-address">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e309" annotatedElement="d4e302">
               <body>The mac-address type represents an IEEE 802 MAC address.
The canonical representation uses lowercase characters.

In the value set and its semantics, this type is equivalent
to the MacAddress textual convention of the SMIv2.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e322" name="yang:xpath1.0">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e324" name="xpath1.0">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e326" annotatedElement="d4e322">
               <body>This type represents an XPATH 1.0 expression.

When a schema node is defined that uses this type, the
description of the schema node MUST specify the XPath
context in which the XPath expression is evaluated.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e339" name="yang:hex-string">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e341" name="hex-string">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e346" annotatedElement="d4e339">
               <body>A hexadecimal string with octets represented as hex digits
separated by colons.  The canonical representation uses
lowercase characters.</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e354" name="yang:uuid">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e356" name="uuid">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e361" annotatedElement="d4e354">
               <body>A Universally Unique IDentifier in the string representation
defined in RFC 4122.  The canonical representation uses
lowercase characters.

The following is an example of a UUID in string representation:
f81d4fae-7dec-11d0-a765-00a0c91e6bf6
</body>
            </ownedComment>
         </packagedElement>
         <packagedElement xmi:type="uml:DataType" xmi:id="d4e374" name="yang:dotted-quad">
            <ownedAttribute xmi:type="uml:Property" xmi:id="d4e376" name="dotted-quad">
               <type xmi:type="uml:DataType" href="YangBuildInTypes.uml#ybit:string"/>
            </ownedAttribute>
            <ownedComment xmi:type="uml:Comment" xmi:id="d4e381" annotatedElement="d4e374">
               <body>An unsigned 32-bit number expressed in the dotted-quad
notation, i.e., four octets written as decimal numbers
and separated with the '.' (full stop) character.</body>
            </ownedComment>
         </packagedElement>
      </packagedElement>
      <packagedElement xmi:type="uml:Package"
                       xmi:id="d4e1_ietf-yang-types"
                       name="ClassDiagrams"/>
      <profileApplication xmi:type="uml:ProfileApplication" xmi:id="d4e1pa1">
         <eAnnotations xmi:type="ecore:EAnnotation"
                       xmi:id="d4e1pa1ea1"
                       source="PapyrusVersion">
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa1ea1d1"
                     key="Version"
                     value="0.0.8"/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa1ea1d2"
                     key="Comment"
                     value="ProfileLifecycle Profile v0.0.4 applied."/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa1ea1d3"
                     key="Copyright"
                     value=""/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa1ea1d4"
                     key="Date"
                     value="2017-08-16"/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa1ea1d5"
                     key="Author"
                     value=""/>
         </eAnnotations>
         <eAnnotations xmi:type="ecore:EAnnotation"
                       xmi:id="d4e1pa1ea2"
                       source="http://www.eclipse.org/uml2/2.0.0/UML">
            <references xmi:type="ecore:EPackage"
                        href="UmlProfiles/OpenInterfaceModelProfile/OpenInterfaceModel_Profile.profile.uml#_jdlJkIJYEee3epvelL_xvA"/>
         </eAnnotations>
         <appliedProfile xmi:type="uml:Profile"
                         href="UmlProfiles/OpenInterfaceModelProfile/OpenInterfaceModel_Profile.profile.uml#_UbM6ILbyEeaufdfMFhfy_A"/>
      </profileApplication>
      <profileApplication xmi:type="uml:ProfileApplication" xmi:id="d4e1pa2">
         <eAnnotations xmi:type="ecore:EAnnotation"
                       xmi:id="d4e1pa2ea1"
                       source="PapyrusVersion">
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa2ea1d1"
                     key="Version"
                     value="0.2.13"/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa2ea1d2"
                     key="Comment"
                     value="ProfileLifecycle Profile v0.0.4 applied."/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa2ea1d3"
                     key="Copyright"
                     value=""/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa2ea1d4"
                     key="Date"
                     value="2017-08-16"/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa2ea1d5"
                     key="Author"
                     value=""/>
         </eAnnotations>
         <eAnnotations xmi:type="ecore:EAnnotation"
                       xmi:id="d4e1pa2ea2"
                       source="http://www.eclipse.org/uml2/2.0.0/UML">
            <references xmi:type="ecore:EPackage"
                        href="UmlProfiles/OpenModelProfile/OpenModel_Profile.profile.uml#_JpVIYIJYEee3epvelL_xvA"/>
         </eAnnotations>
         <appliedProfile xmi:type="uml:Profile"
                         href="UmlProfiles/OpenModelProfile/OpenModel_Profile.profile.uml#_m1xqsHBgEd6FKu9XX1078A"/>
      </profileApplication>
      <profileApplication xmi:type="uml:ProfileApplication" xmi:id="d4e1pa3">
         <eAnnotations xmi:type="ecore:EAnnotation"
                       xmi:id="d4e1pa3ea1"
                       source="PapyrusVersion">
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa3ea1d1"
                     key="Version"
                     value="0.0.4"/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa3ea1d2"
                     key="Comment"
                     value="Metaclasses Property and Stereotype added via &lt;Element Import&gt;."/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa3ea1d3"
                     key="Copyright"
                     value=""/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa3ea1d4"
                     key="Date"
                     value="2017-08-08"/>
            <details xmi:type="ecore:EStringToStringMapEntry"
                     xmi:id="d4e1pa3ea1d5"
                     key="Author"
                     value=""/>
         </eAnnotations>
         <eAnnotations xmi:type="ecore:EAnnotation"
                       xmi:id="d4e1pa3ea2"
                       source="http://www.eclipse.org/uml2/2.0.0/UML">
            <references xmi:type="ecore:EPackage"
                        href="UmlProfiles/ProfileLifecycleProfile/ProfileLifecycle_Profile.profile.uml#_AL3HsHweEee8oZaf2rRQlg"/>
         </eAnnotations>
         <appliedProfile xmi:type="uml:Profile"
                         href="UmlProfiles/ProfileLifecycleProfile/ProfileLifecycle_Profile.profile.uml#_CBpGoEdZEearpawF38eisA"/>
      </profileApplication>
   </uml:Model>
</xmi:XMI>
